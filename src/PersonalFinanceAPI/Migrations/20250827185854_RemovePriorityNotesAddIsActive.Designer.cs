// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersonalFinanceAPI.Infrastructure.Data;

#nullable disable

namespace PersonalFinanceAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250827185854_RemovePriorityNotesAddIsActive")]
    partial class RemovePriorityNotesAddIsActive
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pgcrypto");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_type");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<string>("NewValuesJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValuesJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("old_values");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.BankAggregator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApiEndpoint")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("api_endpoint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("bank_aggregators");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e0af082c-bf9a-4df5-bf21-e2e4efb7fffe"),
                            ApiEndpoint = "https://api.demo-bank.com",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9247),
                            IsActive = true,
                            Name = "Demo Bank Connector",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9249)
                        },
                        new
                        {
                            Id = new Guid("7aa95763-a949-4a4d-a424-a08f1fb29ed8"),
                            ApiEndpoint = "https://api.openbanking-sim.com",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9343),
                            IsActive = true,
                            Name = "Simulated Open Banking",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9345)
                        });
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("BudgetAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("budget_amount");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CurrentSpent")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("current_spent");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("period_type");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("budgets");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.BudgetUtilization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AmountUtilized")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("amount_utilized");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid")
                        .HasColumnName("budget_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_id");

                    b.Property<DateOnly>("UtilizationDate")
                        .HasColumnType("date")
                        .HasColumnName("utilization_date");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("TransactionId");

                    b.ToTable("budget_utilizations");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsSystemDefined")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system_defined");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("033ec4c4-9f02-4685-b6cc-98351f314a46"),
                            Color = "#FF6B6B",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8435),
                            Icon = "restaurant",
                            IsSystemDefined = true,
                            Name = "Food & Dining",
                            Type = "EXPENSE",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8437)
                        },
                        new
                        {
                            Id = new Guid("fbcd73cf-db49-4ef4-81ce-46a01b8e16d5"),
                            Color = "#4ECDC4",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8446),
                            Icon = "car",
                            IsSystemDefined = true,
                            Name = "Transportation",
                            Type = "EXPENSE",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8448)
                        },
                        new
                        {
                            Id = new Guid("c85348e4-d718-4b24-90ef-80daf7a205d8"),
                            Color = "#45B7D1",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8455),
                            Icon = "shopping-cart",
                            IsSystemDefined = true,
                            Name = "Shopping",
                            Type = "EXPENSE",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8457)
                        },
                        new
                        {
                            Id = new Guid("e572cb80-a489-4041-8639-850b293b997d"),
                            Color = "#96CEB4",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8465),
                            Icon = "movie",
                            IsSystemDefined = true,
                            Name = "Entertainment",
                            Type = "EXPENSE",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8466)
                        },
                        new
                        {
                            Id = new Guid("f7faf112-dd62-4688-870b-433a29c04fa2"),
                            Color = "#FFEAA7",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8474),
                            Icon = "receipt",
                            IsSystemDefined = true,
                            Name = "Bills & Utilities",
                            Type = "EXPENSE",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8475)
                        },
                        new
                        {
                            Id = new Guid("863d73ad-1f51-48d4-b82b-f3a2f0e1e4f8"),
                            Color = "#DDA0DD",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8483),
                            Icon = "medical",
                            IsSystemDefined = true,
                            Name = "Healthcare",
                            Type = "EXPENSE",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8484)
                        },
                        new
                        {
                            Id = new Guid("b7716fdd-11a8-4647-85fc-7dc9220ab95d"),
                            Color = "#98D8C8",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8500),
                            Icon = "graduation-cap",
                            IsSystemDefined = true,
                            Name = "Education",
                            Type = "EXPENSE",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8501)
                        },
                        new
                        {
                            Id = new Guid("3056e4a4-c858-4cb0-af01-a7f645a2514a"),
                            Color = "#F7DC6F",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8509),
                            Icon = "plane",
                            IsSystemDefined = true,
                            Name = "Travel",
                            Type = "EXPENSE",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8510)
                        },
                        new
                        {
                            Id = new Guid("45c6a13f-5dfd-4b58-9b6c-eaf418ff1dde"),
                            Color = "#2ECC71",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8517),
                            Icon = "dollar-sign",
                            IsSystemDefined = true,
                            Name = "Salary",
                            Type = "INCOME",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8518)
                        },
                        new
                        {
                            Id = new Guid("af1d1e46-4f83-4c65-b295-8a1182fae494"),
                            Color = "#27AE60",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8525),
                            Icon = "briefcase",
                            IsSystemDefined = true,
                            Name = "Freelance",
                            Type = "INCOME",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8527)
                        },
                        new
                        {
                            Id = new Guid("a4fd4890-eedd-4055-a727-bbf13f544726"),
                            Color = "#16A085",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8534),
                            Icon = "trending-up",
                            IsSystemDefined = true,
                            Name = "Investment Returns",
                            Type = "INCOME",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8535)
                        },
                        new
                        {
                            Id = new Guid("05c787a1-17aa-4e69-9e46-608e129b1853"),
                            Color = "#95A5A6",
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8542),
                            Icon = "exchange",
                            IsSystemDefined = true,
                            Name = "Transfer",
                            Type = "TRANSFER",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(8543)
                        });
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.FinancialGoal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CurrentAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("current_amount");

                    b.Property<string>("GoalName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("goal_name");

                    b.Property<string>("GoalType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("goal_type");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("PriorityLevel")
                        .HasColumnType("integer")
                        .HasColumnName("priority_level");

                    b.Property<decimal>("TargetAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("target_amount");

                    b.Property<DateOnly?>("TargetDate")
                        .HasColumnType("date")
                        .HasColumnName("target_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("financial_goals");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomeEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("IncomeSourceId")
                        .HasColumnType("integer")
                        .HasColumnName("income_source_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_date");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("reference_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("IncomeSourceId");

                    b.ToTable("income_entries");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("current_amount");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("PlanType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("plan_type");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("target_amount");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("income_plans");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomePlanMilestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AchievedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("achieved_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("IncomePlanId")
                        .HasColumnType("integer")
                        .HasColumnName("income_plan_id");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_achieved");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<decimal>("TargetAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("target_amount");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("target_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("IncomePlanId");

                    b.ToTable("income_plan_milestones");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomeSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("actual_amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<decimal>("ExpectedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("expected_amount");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("frequency");

                    b.Property<int>("IncomePlanId")
                        .HasColumnType("integer")
                        .HasColumnName("income_plan_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("source_type");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("IncomePlanId");

                    b.ToTable("income_sources");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.InvestmentSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("ExpectedReturnRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("expected_return_rate");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("InvestmentProduct")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("investment_product");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("PriorityScore")
                        .HasColumnType("integer")
                        .HasColumnName("priority_score");

                    b.Property<string>("Reasoning")
                        .HasColumnType("text")
                        .HasColumnName("reasoning");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("risk_level");

                    b.Property<decimal>("SuggestedAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("suggested_amount");

                    b.Property<string>("SuggestionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("suggestion_type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("investment_suggestions");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.LinkedAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("account_type");

                    b.Property<decimal>("Balance")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("balance");

                    b.Property<Guid?>("BankAggregatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("bank_aggregator_id");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bank_name");

                    b.Property<DateTime?>("ConsentExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consent_expires_at");

                    b.Property<DateTime>("ConsentGivenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consent_given_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency_code");

                    b.Property<string>("ExternalAccountId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("external_account_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastSyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_synced_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BankAggregatorId");

                    b.HasIndex("UserId");

                    b.ToTable("linked_accounts");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<string>("MccCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("mcc_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("merchants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6f0da85-d7ec-4a37-bd41-684f24dcc391"),
                            CategoryId = new Guid("033ec4c4-9f02-4685-b6cc-98351f314a46"),
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9461),
                            IsVerified = true,
                            MccCode = "5812",
                            Name = "Swiggy",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9462)
                        },
                        new
                        {
                            Id = new Guid("f3308749-5997-474b-b56e-9508fb109325"),
                            CategoryId = new Guid("033ec4c4-9f02-4685-b6cc-98351f314a46"),
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9471),
                            IsVerified = true,
                            MccCode = "5812",
                            Name = "Zomato",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9472)
                        },
                        new
                        {
                            Id = new Guid("834c46d6-fcbf-44b7-bff8-dd6e344205b2"),
                            CategoryId = new Guid("fbcd73cf-db49-4ef4-81ce-46a01b8e16d5"),
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9488),
                            IsVerified = true,
                            MccCode = "4121",
                            Name = "Uber",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9489)
                        },
                        new
                        {
                            Id = new Guid("c54934e5-e0b7-40d4-bcb6-183c8dcc69d1"),
                            CategoryId = new Guid("c85348e4-d718-4b24-90ef-80daf7a205d8"),
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9505),
                            IsVerified = true,
                            MccCode = "5399",
                            Name = "Amazon",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9506)
                        },
                        new
                        {
                            Id = new Guid("f2ddcd4e-bbd5-4a13-8f57-893ad4d05716"),
                            CategoryId = new Guid("e572cb80-a489-4041-8639-850b293b997d"),
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9515),
                            IsVerified = true,
                            MccCode = "4899",
                            Name = "Netflix",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9516)
                        },
                        new
                        {
                            Id = new Guid("b22225bb-32ef-44b0-8b8e-384147690dfb"),
                            CategoryId = new Guid("f7faf112-dd62-4688-870b-433a29c04fa2"),
                            CreatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9524),
                            IsVerified = true,
                            MccCode = "4900",
                            Name = "BSES Delhi",
                            UpdatedAt = new DateTime(2025, 8, 27, 18, 58, 50, 285, DateTimeKind.Utc).AddTicks(9525)
                        });
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.MonthlySummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AverageTransactionAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("average_transaction_amount");

                    b.Property<DateTime>("ComputedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("computed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("boolean")
                        .HasColumnName("is_final");

                    b.Property<DateOnly>("MonthYear")
                        .HasColumnType("date")
                        .HasColumnName("month_year");

                    b.Property<decimal>("NetSavings")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("net_savings");

                    b.Property<decimal>("SavingsRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("savings_rate");

                    b.Property<decimal>("TopExpenseAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("top_expense_amount");

                    b.Property<Guid?>("TopExpenseCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("top_expense_category_id");

                    b.Property<decimal>("TotalExpenses")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("total_expenses");

                    b.Property<decimal>("TotalIncome")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("total_income");

                    b.Property<int>("TransactionCount")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TopExpenseCategoryId");

                    b.HasIndex("UserId", "MonthYear")
                        .IsUnique();

                    b.ToTable("monthly_summaries");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.SuggestionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("action");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("action_date");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<Guid>("SuggestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("suggestion_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SuggestionId");

                    b.HasIndex("UserId");

                    b.ToTable("suggestion_history");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("amount");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency_code");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("external_transaction_id");

                    b.Property<bool>("IsCategorizedManually")
                        .HasColumnType("boolean")
                        .HasColumnName("is_categorized_manually");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean")
                        .HasColumnName("is_recurring");

                    b.Property<bool>("IsTransfer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_transfer");

                    b.Property<Guid>("LinkedAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("linked_account_id");

                    b.Property<Guid?>("MerchantId")
                        .HasColumnType("uuid")
                        .HasColumnName("merchant_id");

                    b.Property<DateOnly?>("PostedDate")
                        .HasColumnType("date")
                        .HasColumnName("posted_date");

                    b.Property<string>("RawDataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("raw_data");

                    b.Property<string>("RecurringFrequency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("recurring_frequency");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("reference_number");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("transaction_type");

                    b.Property<Guid?>("TransferToAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("transfer_to_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LinkedAccountId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("TransferToAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.TransactionFlag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<string>("FlagType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("flag_type");

                    b.Property<string>("FlagValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("flag_value");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TransactionId");

                    b.ToTable("transaction_flags");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("AnnualIncome")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("annual_income");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<bool>("IsPhoneVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_phone_verified");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Occupation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("occupation");

                    b.Property<string>("OtpCode")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("otp_code");

                    b.Property<DateTime?>("OtpExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("otp_expires_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.UserAlert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acknowledged_at");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("action_url");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("alert_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsActionable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_actionable");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("MetadataJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("metadata");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("severity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_alerts");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.UserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency_code");

                    b.Property<decimal>("ExpenseThreshold")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("expense_threshold");

                    b.Property<string>("InvestmentRiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("investment_risk_level");

                    b.Property<bool>("NotificationEmail")
                        .HasColumnType("boolean")
                        .HasColumnName("notification_email");

                    b.Property<bool>("NotificationPush")
                        .HasColumnType("boolean")
                        .HasColumnName("notification_push");

                    b.Property<bool>("NotificationSms")
                        .HasColumnType("boolean")
                        .HasColumnName("notification_sms");

                    b.Property<decimal>("SavingsGoalMonthly")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)")
                        .HasColumnName("savings_goal_monthly");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("timezone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_preferences");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccessTokenJti")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("access_token_jti");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("user_sessions");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.AuditLog", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Budget", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.Category", "Category")
                        .WithMany("Budgets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany("Budgets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.BudgetUtilization", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.Budget", "Budget")
                        .WithMany("Utilizations")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalFinanceAPI.Models.Entities.Transaction", "Transaction")
                        .WithMany("BudgetUtilizations")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Category", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.FinancialGoal", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany("FinancialGoals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomeEntry", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.IncomeSource", "IncomeSource")
                        .WithMany("IncomeEntries")
                        .HasForeignKey("IncomeSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomeSource");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomePlan", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany("IncomePlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomePlanMilestone", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.IncomePlan", "IncomePlan")
                        .WithMany("Milestones")
                        .HasForeignKey("IncomePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomePlan");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomeSource", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.IncomePlan", "IncomePlan")
                        .WithMany("IncomeSources")
                        .HasForeignKey("IncomePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomePlan");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.InvestmentSuggestion", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany("InvestmentSuggestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.LinkedAccount", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.BankAggregator", "BankAggregator")
                        .WithMany("LinkedAccounts")
                        .HasForeignKey("BankAggregatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany("LinkedAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAggregator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Merchant", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.Category", "Category")
                        .WithMany("Merchants")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.MonthlySummary", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.Category", "TopExpenseCategory")
                        .WithMany()
                        .HasForeignKey("TopExpenseCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany("MonthlySummaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TopExpenseCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.SuggestionHistory", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.InvestmentSuggestion", "Suggestion")
                        .WithMany("History")
                        .HasForeignKey("SuggestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Suggestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Transaction", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersonalFinanceAPI.Models.Entities.LinkedAccount", "LinkedAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("LinkedAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PersonalFinanceAPI.Models.Entities.Merchant", "Merchant")
                        .WithMany("Transactions")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersonalFinanceAPI.Models.Entities.LinkedAccount", "TransferToAccount")
                        .WithMany("TransferTransactions")
                        .HasForeignKey("TransferToAccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("LinkedAccount");

                    b.Navigation("Merchant");

                    b.Navigation("TransferToAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.TransactionFlag", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PersonalFinanceAPI.Models.Entities.Transaction", "Transaction")
                        .WithMany("Flags")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.UserAlert", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany("Alerts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.UserPreferences", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithOne("Preferences")
                        .HasForeignKey("PersonalFinanceAPI.Models.Entities.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.UserSession", b =>
                {
                    b.HasOne("PersonalFinanceAPI.Models.Entities.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.BankAggregator", b =>
                {
                    b.Navigation("LinkedAccounts");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Budget", b =>
                {
                    b.Navigation("Utilizations");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Category", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Children");

                    b.Navigation("Merchants");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomePlan", b =>
                {
                    b.Navigation("IncomeSources");

                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.IncomeSource", b =>
                {
                    b.Navigation("IncomeEntries");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.InvestmentSuggestion", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.LinkedAccount", b =>
                {
                    b.Navigation("Transactions");

                    b.Navigation("TransferTransactions");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Merchant", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.Transaction", b =>
                {
                    b.Navigation("BudgetUtilizations");

                    b.Navigation("Flags");
                });

            modelBuilder.Entity("PersonalFinanceAPI.Models.Entities.User", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Budgets");

                    b.Navigation("FinancialGoals");

                    b.Navigation("IncomePlans");

                    b.Navigation("InvestmentSuggestions");

                    b.Navigation("LinkedAccounts");

                    b.Navigation("MonthlySummaries");

                    b.Navigation("Preferences");

                    b.Navigation("Sessions");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
